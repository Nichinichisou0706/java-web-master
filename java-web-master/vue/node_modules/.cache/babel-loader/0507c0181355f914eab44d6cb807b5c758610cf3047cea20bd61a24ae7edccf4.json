{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport request from \"../../utils/request\";\nexport default {\n  name: \"enroll\",\n  data() {\n    //自定义表单校验\n\n    const checkTxt = (rule, value, callback) => {\n      if (value != null && value !== '') {\n        if (value.indexOf(' ') !== -1) {\n          callback(new Error('输入中不能包含空格'));\n        } else {\n          callback();\n        }\n      } else {\n        callback(new Error('请输入用户名'));\n      }\n    };\n    const checkPhone = (rule, value, callback) => {\n      if (!/^[1][3,4,5,6,7,8,9][0-9]{9}$/.test(value)) {\n        callback(new Error('请输入合法的手机号'));\n      }\n      callback();\n    };\n    const checkEmail = (rule, value, callback) => {\n      const reg = /^([a-zA-Z0-9]+[-_\\.]?)+@[a-zA-Z0-9]+\\.[a-z]+$/;\n      if (value === '' || value === undefined || value == null) {\n        callback(new Error('请输入邮箱'));\n      } else {\n        if (!reg.test(value)) {\n          callback(new Error('请输入正确的邮箱地址'));\n        } else {\n          callback();\n        }\n      }\n    };\n    const checkPassword = (rule, value, callback) => {\n      if (!/^(?![\\d]+$)(?![a-zA-Z]+$)(?![^\\da-zA-Z]+$)([^\\u4e00-\\u9fa5\\s]){6,20}$/.test(value)) {\n        callback(new Error('请输入6-20位英文字母、数字或者符号（除空格），且字母、数字和标点符号至少包含两种'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      user: {},\n      rules: {\n        username: [{\n          validator: checkTxt,\n          trigger: 'blur'\n        }],\n        password: [{\n          validator: checkPassword,\n          trigger: 'blur'\n        }],\n        password2: [{\n          validator: checkPassword,\n          trigger: 'blur'\n        }],\n        phone: [{\n          validator: checkPhone,\n          trigger: 'blur'\n        }],\n        email: [{\n          validator: checkEmail,\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  methods: {\n    enroll() {\n      this.$refs['ruleForm'].validate(valid => {\n        if (valid) {\n          if (this.user.password === this.user.password2) {\n            request.post(\"/user/enroll\", this.user).then(res => {\n              if (res.code === '200') {\n                this.$notify.success(\"注册成功!\");\n                this.$router.push('/login');\n              } else {\n                this.$notify.error(res.msg);\n              }\n            });\n          } else {\n            this.$notify.error(\"请检查，两次密码输入不一致\");\n          }\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["request","name","data","checkTxt","rule","value","callback","indexOf","Error","checkPhone","test","checkEmail","reg","undefined","checkPassword","user","rules","username","validator","trigger","password","password2","phone","email","methods","enroll","$refs","validate","valid","post","then","res","code","$notify","success","$router","push","error","msg"],"sources":["src/views/common/enroll.vue"],"sourcesContent":["<template>\n    <div style=\"height: 100vh; position: relative; overflow: hidden\">\n        <div style=\"width: 650px; height: 500px; background-color: white; border-radius: 10px; margin: 150px auto; padding:50px\">\n            <div style=\"margin: 30px; text-align: center; font-size: 30px; font-weight: bold; color: dodgerblue\">欢 迎 注 册</div>\n            <el-form :model=\"user\" :rules=\"rules\" ref=\"ruleForm\">\n                <el-form-item prop=\"username\">\n                    <el-input placeholder=\"请输入用户名\" prefix-icon=\"el-icon-user\" size=\"medium\" v-model=\"user.username\"></el-input>\n                </el-form-item>\n                <el-form-item prop=\"password\">\n                    <el-input type=\"password\" show-password=\"show-password\" placeholder=\"请输入密码\" prefix-icon=\"el-icon-lock\" size=\"medium\" v-model=\"user.password\"></el-input>\n                </el-form-item>\n                <el-form-item prop=\"password2\">\n                    <el-input type=\"password\" show-password=\"show-password\" placeholder=\"请确认密码\" prefix-icon=\"el-icon-lock\" size=\"medium\" v-model=\"user.password2\"></el-input>\n                </el-form-item>\n                <el-form-item prop=\"phone\">\n                    <el-input placeholder=\"请输入电话号码\" prefix-icon=\"el-icon-phone\" size=\"medium\" v-model=\"user.phone\"></el-input>\n                </el-form-item>\n                <el-form-item prop=\"email\">\n                    <el-input placeholder=\"请输入邮箱\" prefix-icon=\"el-icon-coin\" size=\"medium\" v-model=\"user.email\"></el-input>\n                </el-form-item>\n                <el-form-item style=\"text-align: center\">\n                    <el-button style=\"width: 60%\" size=\"medium\" type=\"primary\" @click=\"enroll\">注册</el-button>\n                </el-form-item>\n            </el-form>\n        </div>\n    </div>\n</template>\n\n<script>\n    import request from \"../../utils/request\";\n\n    export default {\n        name: \"enroll\",\n        data() {\n            //自定义表单校验\n\n            const checkTxt = (rule, value, callback) => {\n                if (value != null && value !== '') {\n                    if (value.indexOf(' ') !== -1) {\n                        callback(new Error('输入中不能包含空格'));\n                    } else {\n                        callback();\n                    }\n                } else {\n                    callback(new Error('请输入用户名'));\n                }\n            };\n\n            const checkPhone = (rule, value, callback) => {\n                if (!/^[1][3,4,5,6,7,8,9][0-9]{9}$/.test(value)) {\n                    callback(new Error('请输入合法的手机号'));\n                }\n                callback();\n            };\n\n            const checkEmail = (rule, value, callback) => {\n                const reg = /^([a-zA-Z0-9]+[-_\\.]?)+@[a-zA-Z0-9]+\\.[a-z]+$/;\n                if (value === '' || value === undefined || value == null) {\n                    callback(new Error('请输入邮箱'));\n                } else {\n                    if (!reg.test(value)) {\n                        callback(new Error('请输入正确的邮箱地址'));\n                    } else {\n                        callback();\n                    }\n                }\n            };\n\n            const checkPassword = (rule, value, callback) => {\n                if (!/^(?![\\d]+$)(?![a-zA-Z]+$)(?![^\\da-zA-Z]+$)([^\\u4e00-\\u9fa5\\s]){6,20}$/.test(value)) {\n                    callback(new Error('请输入6-20位英文字母、数字或者符号（除空格），且字母、数字和标点符号至少包含两种'));\n                } else {\n                    callback();\n                }\n            };\n\n\n            return {\n                user: {},\n                rules: {\n                    username: [\n                        { validator: checkTxt, trigger: 'blur' }\n                    ],\n                    password: [\n                        { validator: checkPassword, trigger: 'blur' }\n                    ],\n                    password2: [\n                        { validator: checkPassword, trigger: 'blur' }\n                    ],\n                    phone: [\n                        { validator: checkPhone, trigger: 'blur' }\n                    ],\n                    email: [\n                        { validator: checkEmail, trigger: 'blur' }\n                    ],\n                }\n            }\n        },\n        methods: {\n            enroll() {\n                this.$refs['ruleForm'].validate((valid) => {\n                    if (valid) {\n                        if (this.user.password === this.user.password2){\n                            request.post(\"/user/enroll\",this.user).then(res => {\n                                if (res.code === '200'){\n                                    this.$notify.success(\"注册成功!\");\n                                    this.$router.push('/login');\n                                } else {\n                                    this.$notify.error(res.msg);\n                                }\n                            })\n                        } else {\n                            this.$notify.error(\"请检查，两次密码输入不一致\");\n                        }\n                    }\n                });\n            },\n        }\n    }\n</script>\n\n<style scoped>\n    .cover {\n        width: fit-content;\n        background-color: white;\n        position: absolute;\n        top:50%;\n        left:50%;\n        transform: translate(-50%, -50%);\n        z-index: 1000;\n    }\n</style>"],"mappings":";AA6BA,OAAAA,OAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;;IAEA,MAAAC,QAAA,GAAAA,CAAAC,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,IAAAD,KAAA,YAAAA,KAAA;QACA,IAAAA,KAAA,CAAAE,OAAA;UACAD,QAAA,KAAAE,KAAA;QACA;UACAF,QAAA;QACA;MACA;QACAA,QAAA,KAAAE,KAAA;MACA;IACA;IAEA,MAAAC,UAAA,GAAAA,CAAAL,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,oCAAAI,IAAA,CAAAL,KAAA;QACAC,QAAA,KAAAE,KAAA;MACA;MACAF,QAAA;IACA;IAEA,MAAAK,UAAA,GAAAA,CAAAP,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,MAAAM,GAAA;MACA,IAAAP,KAAA,WAAAA,KAAA,KAAAQ,SAAA,IAAAR,KAAA;QACAC,QAAA,KAAAE,KAAA;MACA;QACA,KAAAI,GAAA,CAAAF,IAAA,CAAAL,KAAA;UACAC,QAAA,KAAAE,KAAA;QACA;UACAF,QAAA;QACA;MACA;IACA;IAEA,MAAAQ,aAAA,GAAAA,CAAAV,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,6EAAAI,IAAA,CAAAL,KAAA;QACAC,QAAA,KAAAE,KAAA;MACA;QACAF,QAAA;MACA;IACA;IAGA;MACAS,IAAA;MACAC,KAAA;QACAC,QAAA,GACA;UAAAC,SAAA,EAAAf,QAAA;UAAAgB,OAAA;QAAA,EACA;QACAC,QAAA,GACA;UAAAF,SAAA,EAAAJ,aAAA;UAAAK,OAAA;QAAA,EACA;QACAE,SAAA,GACA;UAAAH,SAAA,EAAAJ,aAAA;UAAAK,OAAA;QAAA,EACA;QACAG,KAAA,GACA;UAAAJ,SAAA,EAAAT,UAAA;UAAAU,OAAA;QAAA,EACA;QACAI,KAAA,GACA;UAAAL,SAAA,EAAAP,UAAA;UAAAQ,OAAA;QAAA;MAEA;IACA;EACA;EACAK,OAAA;IACAC,OAAA;MACA,KAAAC,KAAA,aAAAC,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA,SAAAb,IAAA,CAAAK,QAAA,UAAAL,IAAA,CAAAM,SAAA;YACArB,OAAA,CAAA6B,IAAA,sBAAAd,IAAA,EAAAe,IAAA,CAAAC,GAAA;cACA,IAAAA,GAAA,CAAAC,IAAA;gBACA,KAAAC,OAAA,CAAAC,OAAA;gBACA,KAAAC,OAAA,CAAAC,IAAA;cACA;gBACA,KAAAH,OAAA,CAAAI,KAAA,CAAAN,GAAA,CAAAO,GAAA;cACA;YACA;UACA;YACA,KAAAL,OAAA,CAAAI,KAAA;UACA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}