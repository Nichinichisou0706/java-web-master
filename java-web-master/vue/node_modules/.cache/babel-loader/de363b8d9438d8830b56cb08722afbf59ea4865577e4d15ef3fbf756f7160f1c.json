{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport request from \"../../utils/request\";\nexport default {\n  name: \"add\",\n  data() {\n    //自定义表单校验\n    const checkPhone = (rule, value, callback) => {\n      if (!/^[1][3,4,5,6,7,8,9][0-9]{9}$/.test(value)) {\n        callback(new Error('请输入合法的手机号'));\n      }\n      callback();\n    };\n    const checkEmail = (rule, value, callback) => {\n      const reg = /^([a-zA-Z0-9]+[-_\\.]?)+@[a-zA-Z0-9]+\\.[a-z]+$/;\n      if (value === '' || value === undefined || value == null) {\n        callback(new Error('请输入邮箱'));\n      } else {\n        if (!reg.test(value)) {\n          callback(new Error('请输入正确的邮箱地址'));\n        } else {\n          callback();\n        }\n      }\n    };\n    const checkID = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error('身份证不能为空'));\n      }\n      if (!/(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/.test(value)) {\n        callback(new Error('请输入正确的二代身份证号码'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      form: {},\n      //表单校验规则\n      rules: {\n        name: [{\n          required: true,\n          message: '请输入姓名',\n          trigger: 'blur'\n        }],\n        personNumber: [{\n          validator: checkID,\n          trigger: 'blur'\n        }],\n        phone: [{\n          validator: checkPhone,\n          trigger: 'blur'\n        }],\n        email: [{\n          validator: checkEmail,\n          trigger: 'blur'\n        }],\n        sex: [{\n          required: true,\n          message: '请选择性别',\n          trigger: 'blur'\n        }],\n        role: [{\n          required: true,\n          message: '请选择身份',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  created() {\n    const id = this.$route.query.id;\n    request.get(\"/user/\" + id).then(res => {\n      this.form = res.data;\n    });\n  },\n  methods: {\n    save() {\n      if (!this.form.id) {\n        this.$notify.error(\"请从用户管理进入该页面哦~\");\n      } else {\n        this.$refs['ruleForm'].validate(valid => {\n          if (valid) {\n            request.post(\"/user/update\", this.form).then(res => {\n              if (res.code === '200') {\n                this.$notify.success(\"编辑成功\");\n                //this.form = {};       这两种方式都是用来清空form\n                this.$refs['ruleForm'].resetFields();\n                this.$router.push('/user/list');\n              } else {\n                this.$notify.error(res.msg);\n              }\n            });\n          }\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["request","name","data","checkPhone","rule","value","callback","test","Error","checkEmail","reg","undefined","checkID","form","rules","required","message","trigger","personNumber","validator","phone","email","sex","role","created","id","$route","query","get","then","res","methods","save","$notify","error","$refs","validate","valid","post","code","success","resetFields","$router","push","msg"],"sources":["src/views/user/update.vue"],"sourcesContent":["<template>\n    <div style=\"width: 95%\">\n        <div style=\"margin-bottom: 30px\">编辑用户信息</div>\n        <el-form :inline=\"true\" :model=\"form\" label-width=\"100px\" :rules=\"rules\" ref=\"ruleForm\">\n            <el-form-item label=\"用户名\" prop=\"username\">\n                <el-input v-model=\"form.username\" placeholder=\"请输入用户名\" readonly=\"true\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"姓名\" prop=\"name\">\n                <el-input v-model=\"form.name\" placeholder=\"请输入姓名\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"性别\" prop=\"sex\">\n                <el-select v-model=\"form.sex\" placeholder=\"请选择性别\">\n                    <el-option label=\"男\" value=\"男\"></el-option>\n                    <el-option label=\"女\" value=\"女\"></el-option>\n                </el-select>\n            </el-form-item>\n            <el-form-item label=\"身份证\" prop=\"personNumber\">\n                <el-input v-model=\"form.personNumber\" placeholder=\"请输入身份证号码\" style=\"\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"联系方式\" prop=\"phone\">\n                <el-input v-model=\"form.phone\" placeholder=\"请输入联系方式\" style=\"\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"邮箱\" prop=\"email\">\n                <el-input v-model=\"form.email\" placeholder=\"请输入邮箱\" style=\"\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"身份\" prop=\"role\">\n                <el-select v-model=\"form.role\" placeholder=\"请选择身份\">\n                    <el-option label=\"学生\" value=\"学生\"></el-option>\n                    <el-option label=\"教师\" value=\"教师\"></el-option>\n                </el-select>\n            </el-form-item>\n        </el-form>\n        <div style=\"text-align: center; margin-top: 30px\">\n            <el-button type=\"primary\" @click=\"save\" size=\"medium\">提交</el-button>\n        </div>\n    </div>\n</template>\n\n<script>\n\n    import request from \"../../utils/request\";\n\n    export default {\n        name: \"add\",\n\n        data() {\n            //自定义表单校验\n            const checkPhone = (rule, value, callback) => {\n                if (!/^[1][3,4,5,6,7,8,9][0-9]{9}$/.test(value)) {\n                    callback(new Error('请输入合法的手机号'));\n                }\n                callback();\n            };\n            const checkEmail = (rule, value, callback) => {\n                const reg = /^([a-zA-Z0-9]+[-_\\.]?)+@[a-zA-Z0-9]+\\.[a-z]+$/;\n                if (value === '' || value === undefined || value == null) {\n                    callback(new Error('请输入邮箱'));\n                } else {\n                    if (!reg.test(value)) {\n                        callback(new Error('请输入正确的邮箱地址'));\n                    } else {\n                        callback();\n                    }\n                }\n            };\n\n            const checkID = (rule, value, callback) => {\n                if (!value) {\n                    callback(new Error('身份证不能为空'))\n                }\n                if (! /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/.test(value)) {\n                    callback(new Error('请输入正确的二代身份证号码'))\n                } else {\n                    callback()\n                }\n            };\n\n            return {\n                form: {},\n                //表单校验规则\n                rules: {\n                    name: [\n                        { required: true, message: '请输入姓名', trigger: 'blur'}\n                    ],\n                    personNumber: [\n                        { validator: checkID, trigger: 'blur' }\n                    ],\n                    phone: [\n                        { validator: checkPhone, trigger: 'blur' }\n                    ],\n                    email: [\n                        { validator: checkEmail, trigger: 'blur' }\n                    ],\n                    sex: [\n                        { required: true, message: '请选择性别', trigger: 'blur'}\n                    ],\n                    role: [\n                        { required: true, message: '请选择身份', trigger: 'blur'}\n                    ],\n                }\n            }\n        },\n\n        created() {\n            const id = this.$route.query.id;\n            request.get(\"/user/\" + id).then(res => {\n                this.form = res.data;\n            });\n        },\n\n        methods: {\n            save() {\n                if (!this.form.id){\n                    this.$notify.error(\"请从用户管理进入该页面哦~\");\n                } else {\n                    this.$refs['ruleForm'].validate((valid) => {\n                        if (valid) {\n                            request.post(\"/user/update\",this.form).then(res => {\n                                if (res.code === '200'){\n                                    this.$notify.success(\"编辑成功\");\n                                    //this.form = {};       这两种方式都是用来清空form\n                                    this.$refs['ruleForm'].resetFields();\n                                    this.$router.push('/user/list');\n                                } else {\n                                    this.$notify.error(res.msg);\n                                }\n                            })\n                        }\n                    })\n                }\n            }\n        }\n    }\n</script>\n\n"],"mappings":";AAwCA,OAAAA,OAAA;AAEA;EACAC,IAAA;EAEAC,KAAA;IACA;IACA,MAAAC,UAAA,GAAAA,CAAAC,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,oCAAAC,IAAA,CAAAF,KAAA;QACAC,QAAA,KAAAE,KAAA;MACA;MACAF,QAAA;IACA;IACA,MAAAG,UAAA,GAAAA,CAAAL,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,MAAAI,GAAA;MACA,IAAAL,KAAA,WAAAA,KAAA,KAAAM,SAAA,IAAAN,KAAA;QACAC,QAAA,KAAAE,KAAA;MACA;QACA,KAAAE,GAAA,CAAAH,IAAA,CAAAF,KAAA;UACAC,QAAA,KAAAE,KAAA;QACA;UACAF,QAAA;QACA;MACA;IACA;IAEA,MAAAM,OAAA,GAAAA,CAAAR,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,KAAAD,KAAA;QACAC,QAAA,KAAAE,KAAA;MACA;MACA,gDAAAD,IAAA,CAAAF,KAAA;QACAC,QAAA,KAAAE,KAAA;MACA;QACAF,QAAA;MACA;IACA;IAEA;MACAO,IAAA;MACA;MACAC,KAAA;QACAb,IAAA,GACA;UAAAc,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAC,YAAA,GACA;UAAAC,SAAA,EAAAP,OAAA;UAAAK,OAAA;QAAA,EACA;QACAG,KAAA,GACA;UAAAD,SAAA,EAAAhB,UAAA;UAAAc,OAAA;QAAA,EACA;QACAI,KAAA,GACA;UAAAF,SAAA,EAAAV,UAAA;UAAAQ,OAAA;QAAA,EACA;QACAK,GAAA,GACA;UAAAP,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAM,IAAA,GACA;UAAAR,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MAEA;IACA;EACA;EAEAO,QAAA;IACA,MAAAC,EAAA,QAAAC,MAAA,CAAAC,KAAA,CAAAF,EAAA;IACAzB,OAAA,CAAA4B,GAAA,YAAAH,EAAA,EAAAI,IAAA,CAAAC,GAAA;MACA,KAAAjB,IAAA,GAAAiB,GAAA,CAAA5B,IAAA;IACA;EACA;EAEA6B,OAAA;IACAC,KAAA;MACA,UAAAnB,IAAA,CAAAY,EAAA;QACA,KAAAQ,OAAA,CAAAC,KAAA;MACA;QACA,KAAAC,KAAA,aAAAC,QAAA,CAAAC,KAAA;UACA,IAAAA,KAAA;YACArC,OAAA,CAAAsC,IAAA,sBAAAzB,IAAA,EAAAgB,IAAA,CAAAC,GAAA;cACA,IAAAA,GAAA,CAAAS,IAAA;gBACA,KAAAN,OAAA,CAAAO,OAAA;gBACA;gBACA,KAAAL,KAAA,aAAAM,WAAA;gBACA,KAAAC,OAAA,CAAAC,IAAA;cACA;gBACA,KAAAV,OAAA,CAAAC,KAAA,CAAAJ,GAAA,CAAAc,GAAA;cACA;YACA;UACA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}