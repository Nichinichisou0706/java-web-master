{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport request from \"../../utils/request\";\nimport Cookies from 'js-cookie';\nexport default {\n  name: \"login\",\n  data() {\n    const checkEmail = (rule, value, callback) => {\n      const reg = /^([a-zA-Z0-9]+[-_\\.]?)+@[a-zA-Z0-9]+\\.[a-z]+$/;\n      if (value === '' || value === undefined || value == null) {\n        callback(new Error('请输入邮箱'));\n      } else {\n        if (!reg.test(value)) {\n          callback(new Error('请输入正确的邮箱地址'));\n        } else {\n          callback();\n        }\n      }\n    };\n    return {\n      loginUser: {},\n      user: {},\n      form: {},\n      code: '',\n      username: '',\n      dialogFormVisible: false,\n      rules: {\n        username: [{\n          required: true,\n          message: '请输入用户名',\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: '请输入密码',\n          trigger: 'blur'\n        }]\n      },\n      passRules: {\n        username: [{\n          required: true,\n          message: '请输入用户名',\n          trigger: 'blur'\n        }],\n        email: [{\n          validator: checkEmail,\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  created() {\n    this.form = {};\n    this.code = {};\n    this.username = {};\n  },\n  methods: {\n    login() {\n      //如果上个用户不是通过退出系统退出的，ta的cookie有可能还在浏览器中\n      if (Cookies.get('user') != null) {\n        Cookies.remove('user');\n      }\n      this.$refs['loginForm'].validate(valid => {\n        if (valid) {\n          request.post(\"/user/login\", this.user).then(res => {\n            if (res.code === '200') {\n              if (res.data != null) {\n                this.loginUser = res.data; // 滑块组件就出现了\n              }\n            } else {\n              this.$notify.error(res.msg);\n            }\n          });\n        }\n      });\n    },\n    onSuccess() {\n      // 滑块验证通过之后触发的\n      Cookies.set('user', JSON.stringify(this.loginUser));\n      alert(\"登陆成功,欢迎使用!\");\n      this.$router.push('/');\n    },\n    onFail() {\n      console.log('onFail');\n    },\n    onRefresh() {\n      console.log('refresh');\n    },\n    forgetPassword() {\n      this.form = {};\n      this.username = {};\n      this.dialogFormVisible = true;\n    },\n    sendEmailCode() {\n      this.$refs['passForm'].validate(valid => {\n        if (valid) {\n          this.$notify.success(\"验证码正在发送，请耐心等待~~\");\n          request.post(\"/user/remind\", this.form).then(res => {\n            if (res.code === '200') {\n              this.code = res.data.substring(0, 4);\n              this.username = res.data.substring(4);\n              this.$notify.success(\"验证码发送成功，请耐心等待~~\");\n            } else {\n              this.$notify.error(res.msg);\n            }\n          });\n        }\n      });\n    },\n    resetPassword() {\n      this.$refs['passForm'].validate(valid => {\n        if (valid) {\n          if (this.code === this.form.code && this.username === this.form.username) {\n            request.post(\"/user/reset\", this.form).then(res => {\n              if (res.code === '200') {\n                this.$notify.success(\"密码重置成功，为了账户安全，请登录后进入个人信息页面修改密码~\");\n                this.form = {};\n                this.dialogFormVisible = false;\n              } else {\n                this.$notify.error(res.msg);\n              }\n            });\n          } else {\n            this.$notify.error(\"验证码不正确哦~\");\n          }\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["request","Cookies","name","data","checkEmail","rule","value","callback","reg","undefined","Error","test","loginUser","user","form","code","username","dialogFormVisible","rules","required","message","trigger","password","passRules","email","validator","created","methods","login","get","remove","$refs","validate","valid","post","then","res","$notify","error","msg","onSuccess","set","JSON","stringify","alert","$router","push","onFail","console","log","onRefresh","forgetPassword","sendEmailCode","success","substring","resetPassword"],"sources":["src/views/common/login.vue"],"sourcesContent":["<template>\n    <div style=\"height: 100vh; position: relative; overflow: hidden\">\n        <el-card class=\"cover\" v-if=\"loginUser.id\">\n            <slide-verify :l=\"42\"\n                          :r=\"10\"\n                          :w=\"310\"\n                          :h=\"155\"\n                          :accuracy=\"5\"\n                          :imgs=\"['http://localhost:9090/files/3.jpg',\n                    'http://localhost:9090/files/4.png',\n                    'http://localhost:9090/files/5.jpg']\"\n                          slider-text=\"向右滑动\"\n                          @success=\"onSuccess\"\n                          @fail=\"onFail\"\n                          @refresh=\"onRefresh\"\n            ></slide-verify>\n        </el-card>\n        <div style=\"width: 500px; height: 350px; background-color: papayawhip; border-radius: 10px; margin: 150px auto; padding:50px\">\n            <div style=\"margin: 30px; text-align: center; font-size: 30px; font-weight: bold; color: dodgerblue\">欢 迎 登 录</div>\n            <el-form :model=\"user\" ref=\"loginForm\" :rules=\"rules\">\n                <el-form-item prop=\"username\">\n                    <el-input placeholder=\"请输入账号\" prefix-icon=\"el-icon-user\" size=\"medium\" v-model=\"user.username\"></el-input>\n                </el-form-item>\n                <el-form-item prop=\"password\">\n                    <el-input type=\"password\" show-password=\"show-password\" placeholder=\"请输入密码\" prefix-icon=\"el-icon-lock\" size=\"medium\" v-model=\"user.password\"></el-input>\n                </el-form-item>\n                <div>{{msg}}</div>\n                <el-form-item>\n                    <el-button style=\"width: 35%; margin-left: 40px\" size=\"medium\" type=\"primary\" @click=\"$router.push('/enroll')\">注册</el-button>\n                    <el-button style=\"width: 35%; margin-left: 20px\" size=\"medium\" type=\"primary\" @click=\"login\">登录</el-button>\n                </el-form-item>\n                <a href=\"javascript:void 0\" @click=\"forgetPassword\" style=\"float: right; margin-right: 5px\">找回密码</a>\n            </el-form>\n        </div>\n\n\n        <el-dialog title=\"找回密码\" :visible.sync=\"dialogFormVisible\" width=\"30%\" >\n            <el-form :model=\"form\" ref=\"passForm\" :rules=\"passRules\" label-width=\"100px\" size=\"small\">\n                <el-form-item label=\"用户名\" prop=\"username\">\n                    <el-input size=\"medium\" v-model=\"form.username\" autocomplete=\"off\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"邮箱\" prop=\"email\">\n                    <el-input size=\"medium\" v-model=\"form.email\" autocomplete=\"off\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"验证码\">\n                    <el-input size=\"medium\"  style=\"width: 200px\" v-model=\"form.code\"></el-input>\n                    <el-button type=\"primary\" style=\"margin-left: 5px\" size=\"medium\" class=\"ml-5\" @click=\"sendEmailCode\">获取验证码</el-button>\n                </el-form-item>\n            </el-form>\n            <div slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click=\"dialogFormVisible = false\">取 消</el-button>\n                <el-button type=\"primary\" @click=\"resetPassword\">重置密码</el-button>\n            </div>\n        </el-dialog>\n\n\n    </div>\n</template>\n\n<script>\n    import request from \"../../utils/request\";\n    import Cookies from 'js-cookie';\n\n    export default {\n        name: \"login\",\n        data() {\n\n            const checkEmail = (rule, value, callback) => {\n                const reg = /^([a-zA-Z0-9]+[-_\\.]?)+@[a-zA-Z0-9]+\\.[a-z]+$/;\n                if (value === '' || value === undefined || value == null) {\n                    callback(new Error('请输入邮箱'));\n                } else {\n                    if (!reg.test(value)) {\n                        callback(new Error('请输入正确的邮箱地址'));\n                    } else {\n                        callback();\n                    }\n                }\n            };\n\n            return {\n                loginUser: {},\n                user: {},\n                form: {},\n                code: '',\n                username: '',\n                dialogFormVisible: false,\n                rules: {\n                    username: [\n                        { required: true, message: '请输入用户名', trigger: 'blur'}\n                    ],\n                    password: [\n                        { required: true, message: '请输入密码', trigger: 'blur'}\n                    ],\n                },\n                passRules: {\n                    username: [\n                        { required: true, message: '请输入用户名', trigger: 'blur'}\n                    ],\n                    email: [\n                        { validator: checkEmail, trigger: 'blur' }\n                    ],\n                },\n            }\n        },\n        created() {\n          this.form = {};\n          this.code = {};\n          this.username = {};\n        },\n        methods: {\n            login() {\n                //如果上个用户不是通过退出系统退出的，ta的cookie有可能还在浏览器中\n                if (Cookies.get('user') != null){\n                    Cookies.remove('user');\n                }\n                this.$refs['loginForm'].validate((valid) => {\n                    if (valid) {\n                        request.post(\"/user/login\",this.user).then(res => {\n                            if (res.code === '200'){\n                                if (res.data != null){\n                                    this.loginUser = res.data;  // 滑块组件就出现了\n                                }\n                            } else {\n                                this.$notify.error(res.msg);\n                            }\n                        })\n                    }\n                })\n            },\n\n            onSuccess() { // 滑块验证通过之后触发的\n                Cookies.set('user', JSON.stringify(this.loginUser));\n                alert(\"登陆成功,欢迎使用!\");\n                this.$router.push('/')\n            },\n\n            onFail() {\n                console.log('onFail')\n            },\n\n            onRefresh() {\n                console.log('refresh')\n            },\n\n            forgetPassword() {\n                this.form = {};\n                this.username = {};\n                this.dialogFormVisible = true;\n            },\n\n            sendEmailCode() {\n                this.$refs['passForm'].validate((valid) => {\n                    if (valid) {\n                        this.$notify.success(\"验证码正在发送，请耐心等待~~\");\n                        request.post(\"/user/remind\",this.form).then(res => {\n                            if (res.code === '200'){\n                                this.code = res.data.substring(0,4);\n                                this.username = res.data.substring(4);\n                                this.$notify.success(\"验证码发送成功，请耐心等待~~\");\n                            } else {\n                                this.$notify.error(res.msg);\n                            }\n                        })\n                    }\n                })\n            },\n\n            resetPassword() {\n                this.$refs['passForm'].validate((valid) => {\n                    if (valid) {\n                        if (this.code === this.form.code && this.username === this.form.username) {\n                            request.post(\"/user/reset\",this.form).then(res => {\n                                if (res.code === '200'){\n                                    this.$notify.success(\"密码重置成功，为了账户安全，请登录后进入个人信息页面修改密码~\");\n                                    this.form = {};\n                                    this.dialogFormVisible = false;\n                                } else {\n                                    this.$notify.error(res.msg);\n                                }\n                            })\n                        } else {\n                            this.$notify.error(\"验证码不正确哦~\");\n                        }\n                    }\n                })\n            }\n        }\n    }\n</script>\n\n<style scoped>\n    .cover {\n        width: fit-content;\n        background-color: white;\n        position: absolute;\n        top:50%;\n        left:50%;\n        transform: translate(-50%, -50%);\n        z-index: 1000;\n    }\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}